// automatically generated by the FlatBuffers compiler, do not modify

package com.ecs160.fbs;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Game extends Table {
  public static Game getRootAsGame(ByteBuffer _bb) { return getRootAsGame(_bb, new Game()); }
  public static Game getRootAsGame(ByteBuffer _bb, Game obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public Game __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public String host() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer hostAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public com.ecs160.fbs.Player players(int j) { return players(new com.ecs160.fbs.Player(), j); }
  public com.ecs160.fbs.Player players(com.ecs160.fbs.Player obj, int j) { int o = __offset(6); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int playersLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public boolean startGame() { int o = __offset(8); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createGame(FlatBufferBuilder builder,
      int hostOffset,
      int playersOffset,
      boolean startGame) {
    builder.startObject(3);
    Game.addPlayers(builder, playersOffset);
    Game.addHost(builder, hostOffset);
    Game.addStartGame(builder, startGame);
    return Game.endGame(builder);
  }

  public static void startGame(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addHost(FlatBufferBuilder builder, int hostOffset) { builder.addOffset(0, hostOffset, 0); }
  public static void addPlayers(FlatBufferBuilder builder, int playersOffset) { builder.addOffset(1, playersOffset, 0); }
  public static int createPlayersVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPlayersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addStartGame(FlatBufferBuilder builder, boolean startGame) { builder.addBoolean(2, startGame, false); }
  public static int endGame(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishGameBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
}

