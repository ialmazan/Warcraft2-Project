// automatically generated by the FlatBuffers compiler, do not modify

package com.ecs160.fbs;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Player extends Table {
  public static Player getRootAsPlayer(ByteBuffer _bb) { return getRootAsPlayer(_bb, new Player()); }
  public static Player getRootAsPlayer(ByteBuffer _bb, Player obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public Player __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public byte color() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public byte playerType() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public byte playerStatus() { int o = __offset(10); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createPlayer(FlatBufferBuilder builder,
      int nameOffset,
      byte color,
      byte playerType,
      byte playerStatus) {
    builder.startObject(4);
    Player.addName(builder, nameOffset);
    Player.addPlayerStatus(builder, playerStatus);
    Player.addPlayerType(builder, playerType);
    Player.addColor(builder, color);
    return Player.endPlayer(builder);
  }

  public static void startPlayer(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addColor(FlatBufferBuilder builder, byte color) { builder.addByte(1, color, 0); }
  public static void addPlayerType(FlatBufferBuilder builder, byte playerType) { builder.addByte(2, playerType, 0); }
  public static void addPlayerStatus(FlatBufferBuilder builder, byte playerStatus) { builder.addByte(3, playerStatus, 0); }
  public static int endPlayer(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishPlayerBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
}

